{
    "jpsType": "update",
    "jpsVersion": "0.99",
    "id": "glassfish-cluster-addon",
    "name": "GlassFish Cluster",
    "logo": "https://github.com/jelastic-jps/glassfish/raw/master/glassfish-cluster/img/glassfish-logo.png",
    "description": "Transforms standalone nodes to cluster",
    "globals": {
        "mountPath": "/opt/glassfish/home/.ssh",
        "port": "28080"
    },
    "onInstall": {
        "if (nodes.cp.length == 1)": {
            "localhost:4848->das:4848": {
                "nodeGroup": "cp",
                "dasNodeId": "${nodes.cp.first.id}"
            }
        },
        "if (nodes.cp.length > 1)": {
            "buildCluster": {
                "redeploy": "false"
            }
        }
    },
    "onBeforeServiceScaleOut[cp]": [{
        "if (nodes.das)": {
            "forEach(event.response.nodes)": [{
                "expose:28080->80": {
                    "id": "${@i.id}"
                }
            }]
        }
    }, {
        "if (!nodes.das)": {
            "buildCluster": {
                "redeploy": "true"
            }
        }
    }],
    "onBeforeScaleIn[cp]": {
        "forEach(event.response.nodes)": {
            "cmd[${@i.id}]": "$HOME_DIR/service.sh delete"
        }
    },
    "onAfterClone": {
        "if (nodes.das)": {
            "script": "https://raw.githubusercontent.com/jelastic-jps/glassfish/master/addons/scripts/on-after-clone.js"
        }
    },
    "actions": {
        "buildCluster": [{
            "addNodes": {
                "cloudlets": 16,
                "displayName": "DAS",
                "nodeType": "docker",
                "nodeGroup": "das",
                "dockerName": "${nodes.cp.first.customitem.dockerName}",
                "dockerTag": "${nodes.cp.first.customitem.dockerTag}",
                "metadata": {
                    "layer": "das"
                },
                "dockerEnvVars": {
                    "DAS": "true"
                },
                "dockerVolumes": [
                    "${globals.mountPath}"
                ],
                "startService": false
            }
        }, {
            "installAddon": {
                "id": "configureVolumesAndLinks",
                "settings": {
                    "redeploy": "${this.redeploy}"
                }
            }
        }],
        "redeployApps": {
            "cmd[${nodes.cp.first.id}]": [
                "$HOME_DIR/service.sh redeploy"
            ]
        },
        "expose:28080->80": {
            "cmd[${this.id}]": [
                "echo JELASTIC_EXPOSE=${globals.port} >> /.jelenv"
            ],
            "user": "root"
        },
        "updateLink2Das": [{
            "localhost:4848->das:4848": {
                "nodeGroup": "cp",
                "dasNodeId": "${nodes.das.first.id}"
            }
        }, {
            "localhost:4848->das:4848": {
                "nodeGroup": "das",
                "dasNodeId": "${nodes.das.first.id}"
            }
        }],
        "localhost:4848->das:4848": {
            "cmd": {
                "nodeGroup": "${this.nodeGroup}",
                "commands": "sed -i \"s/http:\\/\\/localhost:4848/https:\\/\\/node${this.dasNodeId}-${env.domain}:4848/g\" ${STACK_PATH}/glassfish/domains/domain1/docroot/index.html"
            }
        }
    },
    "addons": [{
        "id": "configureVolumesAndLinks",
        "onInstall": [{
                "forEach(nodes.cp)": {
                    "if (${@i.ismaster})": {
                        "cmd[${@i.id}]": "cp $PSWD_FILE ~/pswd"
                    }
                }
            }, {
                "api": "env.control.AddContainerVolumeByGroup",
                "nodeGroup": "cp",
                "path": "${globals.mountPath}"
            }, {
                "api": "env.file.AddMountPointByGroup",
                "nodeGroup": "cp",
                "path": "${globals.mountPath}",
                "protocol": "nfs",
                "sourcePath": "${globals.mountPath}",
                "sourceNodeId": "${nodes.das.first.id}",
                "name": "SSH Keys",
                "readOnly": false
            }, {
                "forEach(nodes.cp)": [{
                    "if (${@i.ismaster})": [{
                        "cmd[${@i.id}]": [
                            "mv ~/pswd ${PSWD_FILE}.old",
                            "d=com/sun/enterprise/v3/admin/adapter",
                            "mkdir -p $d",
                            "echo '<html><head><meta http-equiv=\"refresh\" content=\"0;url=https://node${nodes.das.first.id}-${env.domain}:4848/\" /></head></html>' > $d/statusNotDAS.html",
                            "jar uf ../glassfish/modules/kernel.jar $d/statusNotDAS.html",
                            "rm -rf com"
                        ]
                    }, {
                        "cmd[${@i.id}]": [
                            "iptables -t nat -I PREROUTING -p tcp -m tcp --dport 4848 -j REDIRECT --to-ports 24848"
                        ],
                        "user": "root"
                    }]
                }, {
                    "api": "env.control.LinkDockerNodes",
                    "sourceNodeId": "${nodes.das.first.id}",
                    "targetNodeId": "${@i.id}",
                    "alias": "das",
                    "groupAlias": "das"
                }, {
                    "expose:28080->80": {
                        "id": "${@i.id}"
                    }
                }]
            }, {
                "api": "env.control.ExecDockerRunCmd",
                "nodeId": "${nodes.das.first.id}"
            }, {
                "if (${settings.redeploy})": "redeployApps"
            }, {
                "restartContainers": {
                    "nodeGroup": "cp"
                }
            },
            "updateLink2Das"
        ]
    }]
}
