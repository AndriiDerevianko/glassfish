{
    "jpsType": "update",
    "jpsVersion": "0.99",
    "id": "glassfish-cluster-addon",
    "name": "GlassFish Cluster",
    "logo": "https://github.com/jelastic-jps/glassfish/raw/master/glassfish-cluster/img/glassfish-logo.png",
    "description": "Transforms standalone nodes to cluster",
    "globals": {
        "mountPath": "/opt/glassfish/home/.ssh",
        "port": "28080"
    },
    "onInstall": {
        "if (nodes.cp.length > 1)": {
            "buildCluster": {
                "redeploy": "false"
            }
        }
    },
    "onBeforeServiceScaleOut[cp]": [{
        "if (nodes.das)": {
            "forEach(n:nodes.cp)": {
                "if (${@n.ismaster})": {
                    "forEach(event.response.nodes)": [{
                        "iptables": {
                            "id": "${@i.id}",
                            "address": "${@n.address}",
                            "act": "D"
                        }
                    }, {
                        "expose:28080->80": {
                            "id": "${@i.id}"
                        }
                    }]
                }
            }
        }
    }, {
        "if (!nodes.das)": {
            "buildCluster": {
                "redeploy": "true"
            }
        }
    }],
    "onBeforeScaleIn[cp]": {
        "forEach(event.response.nodes)": {
            "cmd[${@i.id}]": "$HOME_DIR/service.sh delete"
        }
    },
    "actions": {
        "buildCluster": [{
            "addNodes": {
                "cloudlets": 16,
                "displayName": "DAS",
                "nodeType": "docker",
                "nodeGroup": "das",
                "dockerName": "devbeta/glassfish",
                "dockerTag": "4.1.2-jdk-1.8.0_131",
                "metadata": {
                    "layer": "das"
                },
                "dockerEnvVars": {
                    "DAS": "true"
                },
                "dockerVolumes": [
                    "${globals.mountPath}"
                ],
                "startService": false
            }
        }, {
            "if (${this.redeploy})": {
                "installAddon": "redeployApps"
            }
        }, {
            "installAddon": "configureVolumesAndLinks"
        }],
        "iptables": {
            "cmd[${this.id}]": [
                "iptables -t nat -${this.act} PREROUTING -p tcp -d ${this.address} --dport 4848 -j DNAT --to-destination ${nodes.das.first.address}",
                "iptables -t nat -${this.act} POSTROUTING -p tcp --dst ${nodes.das.first.address} --dport 4848 -j SNAT --to-source ${this.address}"
            ],
            "user": "root"
        },
        "expose:28080->80": {
            "cmd[${this.id}]": [
                "echo JELASTIC_EXPOSE=${globals.port} >> /.jelenv"
            ],
            "user": "root"
        },
        "updateLink2Das": [{
            "localhost:4848->das:4848": {
                "nodeGroup": "cp"
            }
        }, {
            "localhost:4848->das:4848": {
                "nodeGroup": "das"
            }
        }],
        "localhost:4848->das:4848": {
            "cmd": {
                "nodeGroup": "${this.nodeGroup}",
                "commands": "sed -i \"s/http:\\/\\/localhost:4848/https:\\/\\/node${nodes.das.first.id}-${env.domain}:4848/g\" ${STACK_PATH}/glassfish/domains/domain1/docroot/index.html"
            }
        }
    },
    "addons": [{
        "id": "redeployApps",
        "onInstall": [{
            "cmd[${nodes.cp.first.id}]": [
                ". /.jelenv",
                "asadmin=$STACK_PATH/bin/asadmin",
                "remote_host=\"--host ${nodes.das.first.address} --port 4848 --secure --user $ADMIN_USER --passwordfile $PSWD_FILE\"",
                "echo 'Checking cluster status - 10 attempts'",
                "for ((i = 1; i < 11; i++))",
                "  do CLUSTER_STATUS=$( $asadmin $remote_host list-clusters | head -n 1 )",
                "  echo \"$i - $CLUSTER_STATUS\"",
                "  grep -q -E 'cluster1 ([a-z ]*)?running' <<< $CLUSTER_STATUS && { echo 'OK'; break; } || { sleep 3; }",
                "done",
                "echo '------'",
                "echo 'Redeploying apps from standalone server to cluster1'",
                "cd $STACK_PATH/glassfish/domains/domain1/applications/__internal/",
                "pwd",
                "for c in *",
                "  do for f in $c/*",
                "    do echo 'Deploying $f to $c...'",
                "    [ \"x${c}\" == \"xROOT\" ] && deploy_context=\"--contextroot /\" || deploy_context=\"--contextroot ${c}\"",
                "    cmd=\"$asadmin $remote_host deploy --availabilityenabled=true --asyncreplication=false --force=true --target cluster1 $deploy_context $f\"",
                "    echo $cmd",
                "    $cmd",
                "  done",
                "done"
            ]
        }]
    }, {
        "id": "configureVolumesAndLinks",
        "onInstall": [{
                "api": "env.control.AddContainerVolumeByGroup",
                "nodeGroup": "cp",
                "path": "${globals.mountPath}"
            }, {
                "api": "env.file.AddMountPointByGroup",
                "nodeGroup": "cp",
                "path": "${globals.mountPath}",
                "protocol": "nfs",
                "sourcePath": "${globals.mountPath}",
                "sourceNodeId": "${nodes.das.first.id}",
                "name": "SSH Keys",
                "readOnly": false
            }, {
                "forEach(nodes.cp)": [{
                    "api": "env.control.LinkDockerNodes",
                    "sourceNodeId": "${nodes.das.first.id}",
                    "targetNodeId": "${@i.id}",
                    "alias": "das",
                    "groupAlias": "das"
                }, {
                    "if (${@i.ismaster})": {
                        "iptables": {
                            "id": "${@i.id}",
                            "address": "${@i.address}",
                            "act": "A"
                        }
                    }
                }, {
                    "expose:28080->80": {
                        "id": "${@i.id}"
                    }
                }]
            }, {
                "api": "env.control.ExecDockerRunCmd",
                "nodeId": "${nodes.das.first.id}"
            }, {
                "restartContainers": {
                    "nodeGroup": "cp"
                }
            },
            "updateLink2Das"
        ],
        "success": {
            "email": "<table style='font-size:14px'><tr><td>Admin Console:</td><td><a href='${nodes.das.first.adminUrl}' target='_blank'>${nodes.das.first.adminUrl}</a></td></tr><tr><td>Login:</td><td><b>admin</b></td></tr><tr><td>Password:</td><td><b>glassfish</b></td></tr></table>"
        }
    }]
}
